--Enable UUID extension
create extension if not exists "uuid-ossp";

-- Create updated_at trigger function
create or replace function update_updated_at_column()
returns trigger as $$
begin
    NEW.updated_at = now();
    return NEW;
end;
$$ language 'plpgsql';

-- Create members table
create table if not exists members (
  id bigint generated by default as identity primary key,
  name text not null,
  contact text,
  share_amount numeric(10,2),
  join_date date,
  is_active boolean default true,
  email text,
  phone text,
  address text,
  status text default 'active',
 created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

drop trigger if exists update_members_updated_at on members;
create trigger update_members_updated_at before update on members for each row execute procedure update_updated_at_column();

-- Enable RLS
alter table members enable row level security;

-- Drop existing policies
drop policy if exists "Authenticated users can view members" on members;
drop policy if exists "Authenticated users can insert members" on members;
drop policy if exists "Authenticated users can update members" on members;
drop policy if exists "Authenticated users can delete members" on members;

-- Create policies
create policy "Authenticated users can view members" on members
  for select using (auth.role() = 'authenticated');

create policy "Authenticated users can insert members" on members
  for insert with check (auth.role() = 'authenticated');

create policy "Authenticated users can update members" on members
  for update using (auth.role() = 'authenticated');

create policy "Authenticated users can delete members" on members
  for delete using (auth.role() = 'authenticated');

-- Create payments table
create table if not exists payments (
  id bigint generated by default as identity primary key,
  member_id bigint references members(id) on delete cascade not null,
  amount numeric(10,2) not null,
  payment_date date not null,
  payment_method text,
  description text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

drop trigger if exists update_payments_updated_at on payments;
create trigger update_payments_updated_at before update on payments for each row execute procedure update_updated_at_column();

-- Enable RLS
alter table payments enable row level security;

-- Drop existing policies
drop policy if exists "Authenticated users can view payments" on payments;
drop policy if exists "Authenticated users can insert payments" on payments;
drop policy if exists "Authenticated users can update payments" on payments;
drop policy if exists "Authenticated users can delete payments" on payments;

-- Create policies
create policy "Authenticated users can view payments" on payments
  for select using (auth.role() = 'authenticated');

create policy "Authenticated users can insert payments" on payments
  for insert with check (auth.role() = 'authenticated');

create policy "Authenticated users can update payments" on payments
  for update using (auth.role() = 'authenticated');

create policy "Authenticated users can delete payments" on payments
  for delete using (auth.role() = 'authenticated');

-- Create transaction_requests table
create table if not exists transaction_requests (
  id bigint generated by default as identity primary key,
  member_id bigint references members(id) on delete cascade not null,
  amount numeric(10,2) not null,
  request_date date not null,
  description text,
  status text default 'pending',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

drop trigger if exists update_transaction_requests_updated_at on transaction_requests;
create trigger update_transaction_requests_updated_at before update on transaction_requests for each row execute procedure update_updated_at_column();

-- Enable RLS
alter table transaction_requests enable row level security;

-- Drop existing policies
drop policy if exists "Authenticated users can view transaction requests" on transaction_requests;
drop policy if exists "Authenticated users can insert transaction requests" on transaction_requests;
drop policy if exists "Authenticated users can update transaction requests" on transaction_requests;
drop policy if exists "Authenticated users can delete transaction requests" on transaction_requests;

-- Create policies
create policy "Authenticated users can view transaction requests" on transaction_requests
  for select using (auth.role() = 'authenticated');

create policy "Authenticated users can insert transaction requests" on transaction_requests
  for insert with check (auth.role() = 'authenticated');

create policy "Authenticated users can update transaction requests" on transaction_requests
  for update using (auth.role() = 'authenticated');

create policy "Authenticated users can delete transaction requests" on transaction_requests
  for delete using (auth.role() = 'authenticated');

-- Create dividends table
create table if not exists dividends (
  id bigint generated by default as identity primary key,
  member_id bigint references members(id) on delete cascade not null,
  amount numeric(10,2) not null,
  dividend_date date not null,
  description text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

drop trigger if exists update_dividends_updated_at on dividends;
create trigger update_dividends_updated_at before update on dividends for each row execute procedure update_updated_at_column();

-- Enable RLS
alter table dividends enable row level security;

-- Drop existing policies
drop policy if exists "Authenticated users can view dividends" on dividends;
drop policy if exists "Authenticated users can insert dividends" on dividends;
drop policy if exists "Authenticated users can update dividends" on dividends;
drop policy if exists "Authenticated users can delete dividends" on dividends;

-- Create policies
create policy "Authenticated users can view dividends" on dividends
  for select using (auth.role() = 'authenticated');

create policy "Authenticated users can insert dividends" on dividends
  for insert with check (auth.role() = 'authenticated');

create policy "Authenticated users can update dividends" on dividends
  for update using (auth.role() = 'authenticated');

create policy "Authenticated users can delete dividends" on dividends
  for delete using (auth.role() = 'authenticated');

-- Create goals table
create table if not exists goals (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  target_amount numeric(10,2) not null,
  current_amount numeric(10,2) default 0,
  target_date date,
  status text default 'active',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

drop trigger if exists update_goals_updated_at on goals;
create trigger update_goals_updated_at before update on goals for each row execute procedure update_updated_at_column();

-- Enable RLS
alter table goals enable row level security;

-- Drop existing policies
drop policy if exists "Authenticated users can view goals" on goals;
drop policy if exists "Authenticated users can insert goals" on goals;
drop policy if exists "Authenticated users can update goals" on goals;
drop policy if exists "Authenticated users can delete goals" on goals;

-- Create policies
create policy "Authenticated users can view goals" on goals
  for select using (auth.role() = 'authenticated');

create policy "Authenticated users can insert goals" on goals
  for insert with check (auth.role() = 'authenticated');

create policy "Authenticated users can update goals" on goals
  for update using (auth.role() = 'authenticated');

create policy "Authenticated users can delete goals" on goals
  for delete using (auth.role() = 'authenticated');

-- Create permissions table
create table if not exists permissions (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade not null,
  permission text not null,
  resource text not null,
  action text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

drop trigger if exists update_permissions_updated_at on permissions;
create trigger update_permissions_updated_at before update on permissions for each row execute procedure update_updated_at_column();

-- Enable RLS
alter table permissions enable row level security;

-- Drop existing policies
drop policy if exists "Authenticated users can view permissions" on permissions;
drop policy if exists "Authenticated users can insert permissions" on permissions;
drop policy if exists "Authenticated users can update permissions" on permissions;
drop policy if exists "Authenticated users can delete permissions" on permissions;

-- Create policies
create policy "Authenticated users can view permissions" on permissions
  for select using (auth.role() = 'authenticated');

create policy "Authenticated users can insert permissions" on permissions
  for insert with check (auth.role() = 'authenticated');

create policy "Authenticated users can update permissions" on permissions
  for update using (auth.role() = 'authenticated');

create policy "Authenticated users can delete permissions" on permissions
  for delete using (auth.role() = 'authenticated');

-- Create settings table
create table if not exists settings (
  id bigint generated by default as identity primary key,
  key text unique not null,
  value text,
  description text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

drop trigger if exists update_settings_updated_at on settings;
create trigger update_settings_updated_at before update on settings for each row execute procedure update_updated_at_column();

-- Enable RLS
alter table settings enable row level security;

-- Drop existing policies
drop policy if exists "Authenticated users can view settings" on settings;
drop policy if exists "Authenticated users can insert settings" on settings;
drop policy if exists "Authenticated users can update settings" on settings;
drop policy if exists "Authenticated users can delete settings" on settings;

-- Create policies
create policy "Authenticated users can view settings" on settings
  for select using (auth.role() = 'authenticated');

create policy "Authenticated users can insert settings" on settings
  for insert with check (auth.role() = 'authenticated');

create policy "Authenticated users can update settings" on settings
  for update using (auth.role() = 'authenticated');

create policy "Authenticated users can delete settings" on settings
  for delete using (auth.role() = 'authenticated');

-- Create audit_logs table
create table if not exists audit_logs (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade,
  action text not null,
  table_name text,
  record_id text,
  old_values jsonb,
  new_values jsonb,
  ip_address text,
  user_agent text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable RLS
alter table audit_logs enable row level security;

-- Drop existing policies
drop policy if exists "Authenticated users can view audit logs" on audit_logs;
drop policy if exists "Audit logs can be inserted by authenticated users" on audit_logs;

-- Create policies
create policy "Authenticated users can view audit logs" on audit_logs
  for select using (auth.role() = 'authenticated');

create policy "Audit logs can be inserted by authenticated users" on audit_logs
  for insert with check (auth.role() = 'authenticated');

-- Create user_profiles table
create table if not exists user_profiles (
  id uuid references auth.users on delete cascade not null primary key,
  email text unique not null,
  name text,
  role text default 'member',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

drop trigger if exists update_user_profiles_updated_at on user_profiles;
create trigger update_user_profiles_updated_at before update on user_profiles for each row execute procedure update_updated_at_column();

-- Enable RLS
alter table user_profiles enable row level security;

-- Drop existing policies
drop policy if exists "Users can view their own profile" on user_profiles;
drop policy if exists "Users can insert their own profile" on user_profiles;
drop policy if exists "Users can update their own profile" on user_profiles;
drop policy if exists "Admin users can view all profiles" on user_profiles;

-- Create policies
create policy "Users can view their own profile" on user_profiles
  for select using (auth.uid() = id);

create policy "Users can insert their own profile" on user_profiles
  for insert with check (auth.uid() = id);

create policy "Users can update their own profile" on user_profiles
  for update using (auth.uid() = id);

create policy "Admin users can view all profiles" on user_profiles
  for select using (exists (
    select 1 from user_profiles
    where user_profiles.id = auth.uid()
    and user_profiles.role = 'admin'
  ));